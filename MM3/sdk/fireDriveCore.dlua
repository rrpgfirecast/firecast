local rrpg = require("rrpg.lua");
local plugins = require("plugins.lua");
local fdmodule = "RRPG.FIRECAST.FMXModule";

plugins.requirePlugin(fdmodule);

local fireDrive = {};

local _uploads = {};
local _uploadsIdGenerator = 0;

local function unsetupUpload(uploadId)
	local upload =_uploads[uploadId];
	
	if upload ~= nil then
		plugins.unlistenPM(upload.pmListenerId);
		upload.pmListenerId = nil;
		_uploads[uploadId] = nil;
	end;
end;

local function fdManageItem(destName, metadata, onSuccess, onProgress, onFailure)
	_uploadsIdGenerator = _uploadsIdGenerator + 1;
	local esteId = _uploadsIdGenerator;
	local esteUpload = {};	
	local msg = {};
			
	_uploads[esteId] = esteUpload;	
	esteUpload.destName = destName;
	esteUpload.metadata = metadata;
	esteUpload.onSuccess = onSuccess;
	esteUpload.onProgress = onProgress;
	esteUpload.onFailure = onFailure;
	esteUpload.pmListener = "L" .. _rrpg_generateUniqueStrID();
	esteUpload.pmListenerId = plugins.listenPM(esteUpload.pmListener,
		function (msg)
			plugins.replyPM(msg, nil);
		
			if msg.kind == "progress" then
				if onProgress ~= nil then
					onProgress(msg.currentBytes, msg.maxBytes);
				end;
			elseif msg.kind == "error" then				
				unsetupUpload(esteId);		

				if onFailure ~= nil then
					onFailure(msg.errorMsg);
				end;
			elseif msg.kind == "end" then
				unsetupUpload(esteId);								
				
				if onSuccess ~= nil then
					onSuccess(msg.successData);
				end;
			elseif msg.kind == "uploadId" then
				esteUpload.remoteUploadId = msg.uploadId;
			end;
		end);
	
	msg.destName = destName;
	msg.metadata = metadata;
	msg.uploadId = esteId;	
	msg.pmListener = esteUpload.pmListener;
		
	plugins.sendPM(fdmodule, "fireDrive:manageItem", msg, 
		function (r)

		end,
		
		function (r)
			if onFailure ~= nil then
				unsetupUpload(esteId);
				onFailure(r);
			end;
		end);	
	
	return esteId;
end;

local function tryGetMimeFromFileName(fileName)
	local ext = string.match(fileName, "%.[^%.\\/]+$");
		
	if ext ~= nil then
		local r, mime = _util_tryGetMimeFromExtension(ext);
		
		if r then
			return mime;
		else
			return 'application/octet-stream';
		end;
	else
		return 'application/octet-stream';
	end;
end;

function fireDrive.uploadFile(destName, stream, onSuccess, onProgress, onFailure, mimeType)
	local metadata = {};
	stream.position = 0;
	
	if stream.size > 6 * 1024 * 1024 then
		if onFailure then
			onFailure("FILE TOO BIG");
		end;
	
		return nil;
	end;
	
	metadata.headers = {};
	metadata.headers.operation = "create";
	metadata.headers.kind = "file";	
	metadata.blobs = {};
	metadata.blobs[1] = {name="content", streamSharedId = stream:share(), mimeType = mimeType or tryGetMimeFromFileName(destName)};		
	
	local ret = fdManageItem(destName, metadata, onSuccess, onProgress, onFailure);
	metadata.blobs[1].data = nil;
	return ret;
end;

function fireDrive.uploadImage(destName, stream, onSuccess, onProgress, onFailure, mimeType)
	--[[local metadata = {};
	metadata.kind = "image";
	metadata.mimeType = mimeType or tryGetMimeFromFileName(destName);	
	metadata.thumb64 = {mimeType=metadata.mimeType};	
	
	return fdManageItem(destName, stream, metadata, onSuccess, onProgress, onFailure);]]
end;

function fireDrive.upload(...)
	return fireDrive.uploadFile(...);
end;

function fireDrive.abortOperation(operationId)
	local upload = _uploads[operationId];

	if upload ~= nil then
		plugins.sendPM(fdmodule, "fireDrive:abortOperation", {uploadId = upload.remoteUploadId});
	end;
	
	unsetupUpload(operationId);
end;

function fireDrive.createDirectory(directoryName, onSuccess, onFailure)
	local metadata = {};	
	metadata.headers = {};
	metadata.headers.operation = "create";
	metadata.headers.kind = "directory";	
	
	return fdManageItem(directoryName, metadata, onSuccess, nil, onFailure);
end;

function fireDrive.delete(destName, onSuccess, onFailure)
	local metadata = {};	
	metadata.headers = {};
	metadata.headers.operation = "delete";		
	return fdManageItem(destName, metadata, onSuccess, nil, onFailure);
end;

function fireDrive.rename(existingFileName, newFileName, onSuccess, onFailure)
	local metadata = {};	
	metadata.headers = {};
	metadata.headers.operation = "rename";		
	metadata.headers.newFileName = newFileName;
	return fdManageItem(existingFileName, metadata, onSuccess, nil, onFailure);
end;

function fireDrive.getFiles(directory, callback, failureCallback)
	plugins.sendPM(fdmodule, "fireDrive:enumerateFiles", {dir=directory},
		function(r)
			if callback ~= nil then
				callback(r);
			end;
		end,
		
		function(r)
			if failureCallback ~= nil then
				failureCallback(r);
			end;
		end);
end;

function fireDrive.refresh(refreshCallback, failureCallback)
	plugins.sendPM(fdmodule, "fireDrive:refresh", nil, 
		function (r)
			if refreshCallback ~= nil then
				refreshCallback(r);
			end;
		end,
		
		function (r)
			if failureCallback ~= nil then
				failureCallback(r);
			end;
		end);
end;

function fireDrive.getFileInfo(fileName, callback, failureCallback)
	plugins.sendPM(fdmodule, "fireDrive:getFileInfo", {fileName=fileName}, 
		function (r)
			if callback ~= nil then
				callback(r);
			end;
		end,
		
		function (r)
			if failureCallback ~= nil then
				failureCallback(r);
			end;
		end);
end;

function fireDrive.getSpaceInfo(callback, failureCallback)
	plugins.sendPM(fdmodule, "fireDrive:getSpaceInfo", nil, 
		function (r)
			if callback ~= nil then
				callback(r);
			end;
		end,
		
		function (r)
			if failureCallback ~= nil then
				failureCallback(r);
			end;
		end);
end;

return fireDrive;